{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","SetText","style","color","heading","value","onChange","event","target","rows","backgroundColor","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","filter","element","Alert","word","height","alert","charAt","slice","msg","App","setMode","setAlert","message","setTimeout","title","about","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e15006cb.chunk.js","sourcesContent":["// import React, {useState} from \"react\";\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            TextUtils\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.about}\r\n                </Link>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n          </div>\r\n          <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark mode</label>\r\n        </div>\r\n      </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title : PropTypes.string,\r\n  about : PropTypes.string\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n        // console.log(\"UpperCase was Clicked\");\r\n        // SetText(\"You have clicked on handleUpClick\");\r\n        const newText = text.toUpperCase();\r\n        SetText(newText);\r\n        props.showAlert(\"Converted to UpperCase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = () =>{\r\n        // console.log(\"UpperCase was Clicked\");\r\n        // SetText(\"You have clicked on handleUpClick\");\r\n        const newText = text.toLowerCase();\r\n        SetText(newText);\r\n        props.showAlert(\"Converted to LowerCase!\", \"success\");\r\n    }\r\n\r\n    const handleClearAll = () =>{\r\n        // console.log(\"UpperCase was Clicked\");\r\n        // SetText(\"You have clicked on handleUpClick\");\r\n        const newText = '';\r\n        SetText(newText);\r\n        props.showAlert(\"Cleared\", \"success\");\r\n    }\r\n\r\n    const handleCopy = () =>{\r\n        // console.log(\"UpperCase was Clicked\");\r\n        // SetText(\"You have clicked on handleUpClick\");\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied\", \"success\");\r\n\r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"On Change\");\r\n        SetText(event.target.value);\r\n    }\r\n    const [text, SetText] = useState(\"\")\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h4 className=\"mb-2\">{props.heading}</h4>\r\n                <div className=\"mb-3\" >\r\n                <textarea className=\"form-control\" value = {text} onChange={handleOnChange} id=\"mybox\" rows=\"5\" style={{backgroundColor:props.mode === 'light'?'white':'#023156', color: props.mode==='dark'?'white':'#042743'}}></textarea>\r\n                </div>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick} >Convert To UpperCase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick} >Convert To LowerCase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearAll} >Clear All</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy} >Copy Text</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n                <h3>Your Text Summary</h3>\r\n                <p>{text.split(/\\s/).filter((element)=>{return element.length!==0}).length} words {text.length} characters</p>\r\n                <p>{0.008 * text.split(/\\s/).filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length>0?text:\"Nothing to Preview!\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const captalize= (word) =>{\r\n        return word.charAt(0).toUpperCase() + word.slice(1)\r\n    }\r\n\r\n    return (\r\n        <div style={{height : '50px'}}>\r\n        {\r\n         props.alert && <div>\r\n             <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                 <strong>{captalize(props.alert.type)}</strong> : {props.alert.msg}\r\n             </div>\r\n         </div>\r\n        }\r\n    </div>\r\n    )\r\n}\r\n","import \"./App.css\";\n// import About from \"./Components/About\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\nimport Alert from \"./Components/Alert\";\nimport React, { useState } from 'react';\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n//   // Link\n// }from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - Dark Mode\";\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - Light Mode\";\n    }\n  }\n  \n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) =>{\n    setAlert(\n      {\n        msg : message,\n        type : type\n      }\n    )\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"textUtils\" about=\"About Us\" mode={mode} toggleMode = {toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-4\">\n      {/* <Routes> */}\n      {/* <Route exact path='/about' element={<About/>}>\n          </Route>\n          <Route exact path='/' element={<TextForm heading=\"Enter your text here\" mode={mode} showAlert={showAlert}/>}>\n          </Route> */}\n      {/* </Routes> */}\n      <TextForm heading=\"Try TextUtils - Word Counter Character Counter\" mode={mode} showAlert={showAlert}/>\n      </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}